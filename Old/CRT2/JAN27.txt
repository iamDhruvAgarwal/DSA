======== CRT JAN 27 ==========
to take 1st complement of a binary number first flip every bit and then convert
it into decimal also then just negate it so 0101 is 5 and then it become -5 as 1st complement
is negative 

if MSB = 0 directly follow above step
if MSB = 1 then fisrt take 2s complement then decimal equivalent and then negate the number to get answer
in 1s comp to represent negative num we have to invert every bit but in 2s we just need to check MSB if 0 then +ve else -ve number 
to convert into 2s we can simply take a decimal number then convert it into binary so 5 becomes 0101 then as 32 bit rep has 28 extra bits those extra bits are 0000000... 0101 and then take 1s complement of it it becomes 28 1s 111111111.... 1010 then add 1 it becomes 
1111111111... 1011 here 1011 where 1011 to cross check we can take 1s comp it become 0100 then add 1 it becomes 0101 which is 5 hence 1111111111111... 1011 is correct 2s comp of number 5 in 32 bit representation which can be handled by int
int is 4 bytes 4*8 becomes 32 bits 
so 2^32 numbers can be handled by int 



binary operator


AND &
OR |
XOR ^
Right Shift >>
left shift << 
negation ~
============ code for dec to binary ==========

#include <iostream>
#include<bits/stdc++.h>
using namespace std;

int main(){
    int dec;
    cout<<"Enter the decimal number : ";
    cin>>dec;
    string bin = "";
    while(dec > 0){
        bin += ('0' + dec % 2);
        dec = dec / 2;
    }
    reverse(bin.begin(), bin.end());
    cout<<bin<<endl;
    return 0;
}


============= code for binary to decimal ============

#include<iostream>
#include<math.h>
using namespace std;

int main(){
    string str ;
    cin>>str;
    int decimal = 0;
    int pos = 0;
    for(int i=str.length()-1; i>=0; i--){
        decimal += (str[i] - '0') *pow(2,pos);
        pos++;
    }
    cout<<"decimal form is : "<<decimal;
    return 0;
}


========== Code by recursive function ========= 


#include <iostream>
#include<bits/stdc++.h>
using namespace std;

void fxn(int dec, string & bin){
    if(dec <= 0) 
        return;
    bin += ('0' + dec % 2);
    fxn(dec/2,bin);
}

string dp(int dec){
    if(dec == 0) 
        return "0000";
    char rem = (dec % 2) + '0';
    return dp(dec/2) + rem;
}

int main(){
    int dec;
    cout<<"Enter the decimal number : ";
    cin>>dec;
    string bin = "";
    
   // fxn(dec,bin);
    // while(dec > 0){
    //     bin += ('0' + dec % 2);
    //     dec = dec / 2;
    // }
     reverse(bin.begin(), bin.end());
    cout<<dp(dec)<<endl;
    return 0;
}